# -*- coding: utf-8 -*-
"""Robo definitivo da Jala(grupo 1)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QRzX_PHeqtJp5WKT-pGE_78wepjYP7N2
"""

class Part():
    # características do robô
    def __init__(self, nome: str, nivelAtaque=0, nivelDefesa=0, energiaConsumida=0):
        self.nome = nome
        self.nivelAtaque = nivelAtaque
        self.nivelDefesa = nivelDefesa
        self.energiaConsumida = energiaConsumida

    # função que contém e retorna um dicionário com os dados do robô
    def get_dicionario(self):
        # formata a string, substituindo os espaços em branco e convertendo pra letras minúsculas
        formatar_string = self.nome.replace(" ", "_").lower()
        return {
            "{}_nome".format(formatar_string): self.nome.upper(),
            "{}_status".format(formatar_string): self.status_defesa(),
            "{}_ataque".format(formatar_string): self.nivelAtaque,
            "{}_defesa".format(formatar_string): self.nivelDefesa,
            "{}_energia_consumida".format(formatar_string): self.energiaConsumida,
        }

    # função pra reduzir a defesa a cada ataque
    def reduzir_defesa(self, nivelAtaque):
        self.nivelDefesa = self.nivelDefesa - nivelAtaque
        if self.nivelDefesa <= 0:
            self.nivelDefesa = 0

    # função para verificar se o nível de defesa
    def status_defesa(self):
        return self.nivelDefesa <= 0


class Robot:
    # a classe Robot define as características básicas do robô, interagindo com a classe Part que contém as partes do robo
    def __init__(self, nome, codigo_cor, roboSelecionado):
        self.nome = nome
        self.codigo_cor = codigo_cor
        self.energia = 100
        self.roboSelecionado = roboSelecionado
        # chama a classe Part e seus objetos, representando as partes do robô
        self.parts = [
            Part("Cabeça", nivelAtaque=10, nivelDefesa=10, energiaConsumida=5),
            Part("Arma", nivelAtaque=20,
                 nivelDefesa=0, energiaConsumida=10),
            Part("Braço esquerdo", nivelAtaque=10,
                 nivelDefesa=20, energiaConsumida=10),
            Part("Braço direito", nivelAtaque=10,
                 nivelDefesa=20, energiaConsumida=10),
            Part("Perna esquerda", nivelAtaque=8,
                 nivelDefesa=20, energiaConsumida=15),
            Part("Perna direita", nivelAtaque=12,
                 nivelDefesa=20, energiaConsumida=15),
        ]

    # imprime o status atual do robô
    def print_robo(self):
        print(self.codigo_cor)
        # representação visual do robô
        str_robot = personagens[self.roboSelecionado].format(**self.status_partes_robo())
        self.saudacao()
        self.print_energia()
        print(str_robot)
        print(cores["Preto"])

    def saudacao(self):
        print('=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=')
        print("Olá! Meu nome é ", self.nome)

    # porcentagem atual de energia
    def print_energia(self):
        print("Nós temos", self.energia, "% de energia sobrando")
        print('=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=')

    def status_partes_robo(self):
        # dicionário vazio
        part_status = {}
        # faz um loop adicionando as novas partes do robô ao dicionário
        for part in self.parts:
            status_dict = part.get_dicionario()
            part_status.update(status_dict)
        return part_status

    # verifica se o robô ainda tem partes com defesa disponível
    def parte_robo_disponivel(self):
        for part in self.parts:
            if part.status_defesa():
                return True
        return False

    # verifica se o robô está vivo ou morto com base na sua energia
    def robo_ligado(self):
        return self.energia >= 0

    # função de ataque de um robô contra outro
    def ataque(self, robo_inimigo, parte_atacante, parte_atacada):
        robo_inimigo.parts[parte_atacada].reduzir_defesa(
            self.parts[parte_atacante].nivelAtaque)
        self.energia -= self.parts[parte_atacante].energiaConsumida


cores = {
    "Preto": '\x1b[90m',
    "Azul": '\x1b[94m',
    "Ciano": '\x1b[96m',
    "Verde": '\x1b[92m',
    "Magenta": '\x1b[95m',
    "Vermelho": '\x1b[91m',
    "Branco": '\x1b[97m',
    "Amarelo": '\x1b[93m',
}

# função que permite ao usuário escolher nome e cor do robô
def criar_robo():
    print('====='*18)
    robot_nome = input("> Nome do robô: ")
    print('====='*18)
    roboSelecionado = selecionarPersonagem()
    codigo_cor = definir_cor()
    robot = Robot(robot_nome, codigo_cor, roboSelecionado)
    robot.print_robo()
    return robot


def definir_cor():
    print('---------'*12)
    cores_disponiveis = cores
    print("Cores disponíveis:")
    print('---------'*12)
    for key, value in cores_disponiveis.items():
        print(value, key)
    print(cores["Preto"])
    # .capitalize() permite que a entrada seja minúscula/maiúscula
    print('====='*21)
    cor_escolhida = input("\n > Escolha uma cor: ").capitalize()
    print('====='*21)
    # solução para cor inserida fora das opções e quebra de código.
    if cor_escolhida not in cores_disponiveis:
        print('=-=-='*18)
        print("Condição inválida! Insira uma cor que esteja disponível.")
        print('=-=-='*18)
        return definir_cor()
    else:
        return cores_disponiveis[cor_escolhida]

def selecionarPersonagem():
    print('---------'*10)
    print(" Opções de personagem:")
    print('---------'*10)
    for opcao, personagem in personagens.items():
        print(f"{opcao} - {personagem}")
        print('___________'*10)
    while True:
        try:
            print('====='*21)
            opcaoSelecionada = int(input(" Selecione um personagem=> "))
            print('====='*21)
            return opcaoSelecionada
        except (ValueError, KeyError):
            print('=-=-='*18)
            print("\nOpção inválida! Insira uma das opções disponíveis.")
            print('=-=-='*18)

# função que inicia o jogo
def play():
    playing = True
    print('=-=-='*18)
    print("-----------------Bem-vindo(a) ao jogo! Uma intensa batalha espera por você!---------------")
    print('=-=-='*18)
    print(" ")
    print('====='*18)
    print("---------------------Jogador 1, escolha com quem deseja batalhar-------------------------")
    robo_um = criar_robo()
    print('====='*18)
    print("---------------------Jogador 2, escolha com quem deseja batalhar-------------------------")
    robo_dois = criar_robo()
    robo_atual = robo_um
    robo_inimigo = robo_dois
    rodada = 0

    while playing:
        if rodada % 2 == 0:
            robo_atual = robo_um
            robo_inimigo = robo_dois
        else:
            robo_atual = robo_dois
            robo_inimigo = robo_um
        robo_atual.print_robo()
        print("Qual parte devo usar para atacar?")
        parte_atacante = input("Escolha um número:")
        parte_atacante = int(parte_atacante)

        robo_inimigo.print_robo()
        print("Qual parte do inimigo devemos atacar?")
        parte_atacada = input("Escolha um número para atacar o inimigo: ")
        parte_atacada = int(parte_atacada)

        robo_atual.ataque(robo_inimigo, parte_atacante, parte_atacada)
        rodada += 1
        if not robo_inimigo.robo_ligado() or robo_inimigo.parte_robo_disponivel() == False:
            playing = False
            print("Parabéns, você ganhou!")


# ==================================== Opções de batalha ============================================
personagens = {
    1: r"""
       0: {head_name}
       Is available: {head_status}
       Attack: {head_attack}                              
       Defense: {head_defense}
       Energy consumption: {head_energy_consump}
            ^
            |                  |1: {weapon_name}
            |                  |Is available: {weapon_status}
      ___       ___            |Attack: {weapon_attack}
     [___] /~\ [___]           |Defense: {weapon_defense}
     |ooo|.\_/.|ooo|           |Energy consumption: {left_arm_energy_consump}
     |888||   ||888|
  / /|888||   ||888|\ \
 /_./|###||___||###| \._\ ---> |2: {left_arm_name}
 /~\  ~~~ /[_]\ ~~~   /~\      |Is available: {left_arm_status}
(O_O) /~~[_____]~~\  (O_O)     |Attack: {left_arm_attack} 
     (  |       |  )            |Defense: {left_arm_defense}
    [~` ]       [ '~]           |Energy consumption: {left_arm_energy_consump}
    |~~|         |~~|           |
    |  |         |  |           |3: {right_arm_name}
   _<\/>_       _<\/>_          |Is available: {right_arm_status}
  /_====_\     /_====_\         |Attack: {right_arm_attack}                                
                                |Defense: {right_arm_defense}          
             ^                   |Energy consumption: {right_arm_energy_consump}
             |
             |    
|4: {left_leg_name} 
|Is available: {left_leg_status}
|Attack: {left_leg_attack}
|Defense: {left_leg_defense}
|Energy consumption: {left_leg_energy_consump}
|
|5: {right_leg_name}
|Is available: {right_leg_status}
|Attack: {right_leg_attack}
|Defense: {right_leg_defense}
|Energy consumption: {right_leg_energy_consump}
 """,
  2: r"""
           0: {head_name}
           Is available: {head_status}
           Attack: {head_attack}                              
           Defense: {head_defense}
           Energy consumption: {head_energy_consump}
                           ^
                           |                       |1: {weapon_name}
                          ___                      |Is available: {weapon_status}
                         /[-])//  ___              |Attack: {weapon_attack}
                    __ --\ `_/~--|  / \            |Defense: {weapon_defense}
                  /_-/~~--~~ /~~~\\_\ /\           |Energy consumption: {weapon_energy_consump}
                  |  |___|===|_-- | \ \ \        
_/~~~~~~~~|~~\,   ---|---\___/----|  \/\-\             |2: {left_arm_name}
~\________|__/   / // \__ |  ||  / | |   | |           |Is available: {left_arm_status}
         ,~-|~~~~~\--, | \|--|/~|||  |   | |           |Attack: {left_arm_attack}
         [3-|____---~~ _--'==;/ _,   |   |_|           |Defense: {left_arm_defense}
                     /   /\__|_/  \  \__/--/           |Energy consumption: {left_arm_energy_consump}
                    /---/_\  -___/ |  /,--|    ------> |
                    /  /\/~--|   | |  \///             |3: {right_arm_name}
                   /  / |-__ \    |/                   |Is available: {right_arm_status}
                  |--/ /      |-- | \                  |Attack: {right_arm_attack}
                 \^~~\\/\      \   \/- _               |Defense: {right_arm_defense}
                  \    |  \     |~~\~~| \              |Energy consumption: {right_arm_energy_consump}
                   \    \  \     \   \  | \      
                     \    \ |     \   \    \              |4: {left_leg_name} 
                       |~~|\/\|     \   \   |             |Is available: {left_leg_status}
                     |   |/         \_--_- |\             |Attack: {left_leg_attack}
                     |  /            /   |/\/             |Defense: {left_leg_defense}
                      ~~             /  /                 |Energy consumption: {left_leg_energy_consump}
                                    |__/          ------> |
                                                          |5: {right_leg_name}
                                                          |Is available: {right_leg_status}
                                                          |Attack: {right_leg_attack}
                                                          |Defense: {right_leg_defense}
                                                          |Energy consumption: {right_leg_energy_consump}
 """,
3: r"""
                            0: Cabelça                               
                            Is available: {Cabeça_status}              
                            Attack: {head_attack}                              
                            Defense: {head_defense}                  
                            Energy consumption: {head_energy_consump}
                                           ^
                                           |
                                           |
 ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⠶⠟⠛⠛⠻⠶⠶⣶⣤⣤⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⡾⠋⣡⣴⣾⣿⣿⣿⣶⣶⣦⣤⣉⣉⠛⠛⠷⢶⣤⣄⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⠟⢉⣤⣾⣿⣿⣿⡿⠋⠁⠀⠀⠈⠉⠙⠛⠿⢷⣶⣤⣄⣉⠙⠛⠷⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⠟⢁⣴⣿⣿⣿⣿⠟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⣿⡟⠿⢶⣤⣄⠉⠻⣶⣄⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⠟⢁⣴⣿⣿⣿⣿⠟⠁⠀⠀⠀⠀⣀⣤⣤⣄⣀⠀⠀⠀⠀⠀⠀⠙⠓⠦⢄⣈⣻⣷⣄⠈⠻⣷⡀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⠟⢁⣴⣿⣿⣿⡿⠋⠀⠀⠀⠀⠀⣠⣾⣿⣛⠛⠛⠻⣿⣇⠀⠀⠀⠀⣤⣄⣀⠀⠈⠉⠛⠻⠃⠀⠈⠻⣦⡀⠀ ---------> |1: Veneno Acido
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⠟⢁⣴⣿⣿⣿⡿⠋⠀⠀⠀⠀⠀⢠⣾⡿⠋⠉⠛⠻⠶⣶⣿⣿⠀⠀⠀⠀⣿⣿⣿⣿⣶⣤⣀⠀⠀⠀⠀⠀⣸⡇⠀            |Is available: {weapon_status}
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡿⠁⣰⣿⣿⣿⣿⠋⠀⠀⠀⠀⠀⢀⣴⡿⠿⠿⢷⣶⣤⣀⣀⠀⢹⣿⡄⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⡆⠀⣠⡾⠟⠁⠀           |Attack: {weapon_attack}
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⡟⠀⣼⣿⣿⣿⠟⠁⠀⠀⠀⠀⢀⣴⣿⣿⣀⡀⠀⠀⠀⠉⠙⠛⠻⢿⣿⣇⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣇⣴⡟⠁⠀⠀⠀           |Defense: {weapon_defense}
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡿⠀⣸⣿⣿⣿⠋⠀⠀⠀⠀⠀⢠⣾⡟⠉⠉⠛⠛⠿⢷⣶⣤⣄⣀⠀⠀⢸⣿⡄⠀⠀⠈⣿⣿⣿⣿⣿⣿⣿⣿⠏⠀⠀⠀⠀⠀           |Energy consumption: {left_arm_energy_consump}
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⣿⣿⣿⡇⠀⠀⠀⠀⠀⢠⣿⣯⣀⣀⡀⠀⠀⠀⠀⠀⠈⠉⠙⠛⢿⣿⡿⢁⣀⠀⠀⠹⣿⣿⠟⠋⣹⡿⠁⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣧⠀⢹⣿⣿⣇⠀⠀⠀⠀⠀⣿⡟⠉⠛⠛⠻⠿⠷⣶⣦⣤⣄⣀⣀⢀⣾⡟⣰⠟⠉⠳⣆⠀⠀⠀⣀⣾⠏⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⡄⠀⢻⣿⣿⡄⠀⠀⠀⠀⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠛⣿⡿⢰⡏⠀⠀⠀⠈⠛⠶⠾⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀------------> |2: Boca
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⡄⠀⢻⣿⣿⡀⠀⠀⠀⢹⣿⣦⣤⣤⣤⣤⣀⣀⣀⣀⣀⡀⢀⣿⡇⣼⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀             |Is available: {left_arm_status}
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣄⠀⢻⣿⣷⡀⠀⠀⠀⢿⣿⠉⠉⠉⠉⠙⠛⠛⠛⠛⠛⠻⣿⡇⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀              |Attack: {left_arm_attack}
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣆⠀⢻⣿⣷⡀⠀⠀⠈⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇⢿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀                |Defense: {left_arm_defense}
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣆⠀⢻⣿⣿⡄⠀⠀⠘⣿⣦⣤⣤⣤⣤⣤⣤⣤⣤⣴⣿⡇⢸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀              |Energy consumption: {left_arm_energy_consump}
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣦⠀⢻⣿⣿⡄⠀⠀⠘⣿⣏⠉⠉⠉⠉⠉⠀⠀⠀⢻⣿⠘⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣧⠀⠻⣿⣿⡄⠀⠀⠹⣿⡄⠀⠀⠀⠀⠀⠀⠀⢸⣿⡄⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣧⠀⠹⣿⣿⡄⠀⠀⠹⣿⣄⣤⣤⣤⣤⣤⣶⣾⣿⣧⢸⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀------------>|3: Escama
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣷⡀⠹⣿⣿⡄⠀⠀⢹⣿⡉⠉⠁⠀⠀⠀⠀⢸⣿⡌⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀              |Is available: {right_arm_status}
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢷⡀⠹⣿⣿⡄⠀⠀⢻⣷⡀⠀⠀⠀⠀⠀⠀⣿⣇⢹⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀              |Attack: {right_arm_attack} 
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢷⡄⠹⣿⣿⡄⠀⠀⢿⣷⣤⣤⣴⣶⠶⠿⠿⣿⡌⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀             |Defense: {right_arm_defense}
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⡄⠹⣿⣿⡆⠀⠈⢿⣯⠀⠀⠀⠀⠀⠀⢿⣧⢹⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀              |Energy consumption: {right_arm_energy_consump}
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⡄⠹⣿⣿⣄⠀⠘⣿⣧⠀⠀⢀⣀⣀⣼⣿⡄⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣆⠹⣿⣿⡄⠀⠘⣿⣿⠟⠛⠋⠉⠉⢻⣷⠸⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀------------>|4: Corpo
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣆⠹⣿⣿⡄⠀⠘⣿⣆⠀⠀⠀⠀⣸⣿⡇⢿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀              |Is available: {left_leg_status}
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣆⠹⣿⣿⡄⠀⠸⣿⣶⡶⠿⠛⠋⢻⣿⡘⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀             |Attack: {left_leg_attack}
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣆⢹⣿⣿⡀⠀⠹⣿⡄⠀⠀⠀⣀⣿⣧⢹⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀              |Defense: {left_leg_defense}
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⡆⢻⣿⣷⡀⠀⢹⣿⣶⠶⠟⠛⠻⣿⡄⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀              ||Energy consumption: {left_leg_energy_consump}
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⡄⢻⣿⣧⠀⠀⢻⣿⠀⠀⠀⣀⣿⣧⢸⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡴⠒⠛⠛⠛⠒⠦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣷⠈⢿⣿⣇⠀⠈⢿⣷⡶⠟⠛⠻⣿⡄⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠟⠁⢀⣀⠀⢶⣶⣶⣤⡈⠙⢦⣀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣇⠘⣿⣿⡆⠀⠘⣿⡆⠀⠀⣀⣿⣧⢸⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⣠⠾⠋⢀⣠⣾⡿⢿⣷⡄⠻⣿⣿⣿⣷⣄⡉⠳⣄⠀⠀⠀⠀⠀⠀⠀⣿⡀⢻⣿⣿⡀⠀⢻⣿⡾⠟⠋⢹⣿⡈⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⣠⠞⠁⢀⣴⣿⠟⠉⠀⠀⠙⣿⣦⡈⠻⣿⣿⣿⣿⣦⡈⠻⣦⡀⠀⠀⠀⠀⢹⡇⠸⣿⣿⣇⠀⠘⣿⣆⣀⣤⣼⣿⡇⠻⢤⣀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⣠⠞⠁⢀⣴⡿⠋⠁⠀⠀⠀⢀⣴⠟⠻⣿⣦⡈⠻⣿⣿⣿⣿⣷⣄⠙⢦⡀⠀⠀⢸⣷⠀⣿⣿⣿⠀⠀⣿⣿⠋⠉⠀⣿⡇⢠⣄⡉⠛⢶⣄⠀⠀⠀⠀⠀
⠀⠀⠀⢰⠋⠀⠀⠿⣿⣦⣄⡀⠀⢀⣴⡿⠁⠀⠀⢈⣿⢿⣶⣄⡙⠻⢿⣿⣿⣷⣦⡙⢷⣤⣸⣿⠀⣿⣿⣿⡇⠀⣿⣿⣤⣶⢾⣿⡇⢸⣿⣿⣷⣤⡈⠻⢦⡀⠀⠀    ---------> |5: Calda
⠀⠀⠀⠘⣧⠀⠀⠀⠈⠙⠻⢿⣷⣿⣏⡀⠀⠀⣠⡿⠃⠀⠉⢻⣿⣷⣦⣬⣙⣛⠻⠿⠶⠈⠻⠏⢠⣿⣿⣿⡇⠀⣿⡟⠉⠀⣸⣿⠃⢸⣿⣿⣿⡿⠟⢀⡀⠹⣦⠀               |Is available: {right_leg_status}
⠀⠀⣀⡴⠋⠀⣠⣤⣄⠀⠀⠀⠈⠉⠛⠿⣷⣶⣿⣀⡀⠀⢠⡿⠁⠀⠉⣹⡿⠛⠿⠿⣿⣿⠂⠀⣼⣿⣿⣿⠁⢠⣿⣷⡾⢿⣿⠏⠀⠉⠉⠉⢁⣀⣴⣿⣿⣆⠘⣧               |Attack: {right_leg_attack}
⣠⠞⠋⠀⠴⣾⣿⣿⣿⣿⣦⣄⡀⠀⠀⠀⠀⠈⠙⠛⠿⢿⣿⣷⣤⣤⣤⣿⣥⣤⣴⣿⠟⠁⢀⣼⣿⣿⣿⠏⢀⣾⡟⢁⣴⣿⠏⢀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⣿              |Defense: {right_leg_defense}
⠻⠦⣤⣀⡀⠀⠈⠉⠛⠻⠿⢿⣿⣷⣶⣤⣀⠘⠻⠶⣦⣤⣀⣉⠉⠙⠛⠛⠛⠉⠉⠀⣀⣴⣿⣿⣿⡿⠋⣠⣾⣿⣷⡿⠟⠁⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⠟⠃⣰⠏              |Energy consumption: {right_leg_energy_consump}
⠀⠀⠀⠈⠉⠛⠓⠶⠦⣤⣄⣀⣀⡈⠉⠉⠛⠛⠷⠦⠀⠈⠉⠛⠛⠿⠿⠷⣾⣿⣿⣿⡿⠿⠿⠛⠁⠀⠀⠙⠛⠋⠁⠀⠀⠺⠿⠿⠿⠿⠟⠛⠛⣉⣁⣤⠶⠛⠁⠀              
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠛⠛⠛⠲⠶⠶⠶⠤⠤⢤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⠤⠤⠶⠶⠶⠒⠛⠛⠛⠛⠛⠛⠓⠚⠚⠛⠛⠛⠋⠉⠁⠀⠀⠀⠀⠀

 """,
4: r"""
       0: {head_name}
       Is available: {head_status}
       Attack: {head_attack}                              
       Defense: {head_defense}
       Energy consumption: {head_energy_consump}
               ^
               |                  |1: {weapon_name}
               |                  |Is available: {weapon_status}
      ____     |    ____          |Attack: {weapon_attack}
     |oooo|  ____  |oooo| ------> |Defense: {weapon_defense}
     |oooo| '    ' |oooo|         |Energy consumption: {weapon_energy_consump}
     |oooo|/\_||_/\|oooo|          
     `----' / __ \  `----'           |2: {left_arm_name}
    '/  |#|/\/__\/\|#|  \'           |Is available: {left_arm_status}
    /  \|#|| |/\| ||#|/  \           |Attack: {left_arm_attack}
   / \_/|_|| |/\| ||_|\_/ \          |Defense: {left_arm_defense}
  |_\/    O\=----=/O    \/_|         |Energy consumption: {left_arm_energy_consump}
  <_>      |=\__/=|      <_> ------> |
  <_>      |------|      <_>         |3: {right_arm_name}
  | |   ___|======|___   | |         |Is available: {right_arm_status}
 // \\ / |O|======|O| \  //\\        |Attack: {right_arm_attack}
 |  |  | |O+------+O| |  |  |        |Defense: {right_arm_defense}
 |\/|  \_+/        \+_/  |\/|        |Energy consumption: {right_arm_energy_consump}
 \__/  _|||        |||_  \__/        
       | ||        || |          |4: {left_leg_name} 
      [==|]        [|==]         |Is available: {left_leg_status}
      [===]        [===]         |Attack: {left_leg_attack}
       >_<          >_<          |Defense: {left_leg_defense}
      || ||        || ||         |Energy consumption: {left_leg_energy_consump}
      || ||        || || ------> |
      || ||        || ||         |5: {right_leg_name}
    __|\_/|__    __|\_/|__       |Is available: {right_leg_status}
   /___n_n___\  /___n_n___\      |Attack: {right_leg_attack}
                                 |Defense: {right_leg_defense}
                                 |Energy consumption: {right_leg_energy_consump}
"""
}
play()